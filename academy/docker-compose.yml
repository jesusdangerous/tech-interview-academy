services:
  app:
    build: .
    container_name: academy-app
    depends_on:
      - db
      - kafka
    ports:
      - "8090:8080"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_PROFILES_ACTIVE=docker
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - MAIL_NAME=${MAIL_NAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
    networks:
      - backend
  frontend:
    build:
      context: ../frontend
    container_name: academy-frontend
    ports:
      - "5173:5173"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    networks:
      - backend
    depends_on:
      - app
    command: ["npm", "run", "dev"]

  db:
    image: postgres:latest
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - backend

  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "8080:8080"
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - backend
    volumes:
      - grafana-storage:/var/lib/grafana


networks:
  backend:

volumes:
  grafana-storage: